{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nexport function rgbaToThumbHash(w, h, rgba) {\n  if (w > 100 || h > 100) throw new Error(`${w}x${h} doesn't fit in 100x100`);\n  var PI = Math.PI,\n    round = Math.round,\n    max = Math.max,\n    cos = Math.cos,\n    abs = Math.abs;\n  var avg_r = 0,\n    avg_g = 0,\n    avg_b = 0,\n    avg_a = 0;\n  for (var i = 0, j = 0; i < w * h; i++, j += 4) {\n    var alpha = rgba[j + 3] / 255;\n    avg_r += alpha / 255 * rgba[j];\n    avg_g += alpha / 255 * rgba[j + 1];\n    avg_b += alpha / 255 * rgba[j + 2];\n    avg_a += alpha;\n  }\n  if (avg_a) {\n    avg_r /= avg_a;\n    avg_g /= avg_a;\n    avg_b /= avg_a;\n  }\n  var hasAlpha = avg_a < w * h;\n  var l_limit = hasAlpha ? 5 : 7;\n  var lx = max(1, round(l_limit * w / max(w, h)));\n  var ly = max(1, round(l_limit * h / max(w, h)));\n  var l = [];\n  var p = [];\n  var q = [];\n  var a = [];\n  for (var _i = 0, _j = 0; _i < w * h; _i++, _j += 4) {\n    var _alpha = rgba[_j + 3] / 255;\n    var r = avg_r * (1 - _alpha) + _alpha / 255 * rgba[_j];\n    var g = avg_g * (1 - _alpha) + _alpha / 255 * rgba[_j + 1];\n    var b = avg_b * (1 - _alpha) + _alpha / 255 * rgba[_j + 2];\n    l[_i] = (r + g + b) / 3;\n    p[_i] = (r + g) / 2 - b;\n    q[_i] = r - g;\n    a[_i] = _alpha;\n  }\n  var encodeChannel = function encodeChannel(channel, nx, ny) {\n    var dc = 0;\n    var ac = [];\n    var scale = 0;\n    var fx = [];\n    for (var cy = 0; cy < ny; cy++) {\n      for (var cx = 0; cx * ny < nx * (ny - cy); cx++) {\n        var f = 0;\n        for (var x = 0; x < w; x++) fx[x] = cos(PI / w * cx * (x + 0.5));\n        for (var y = 0; y < h; y++) for (var _x = 0, fy = cos(PI / h * cy * (y + 0.5)); _x < w; _x++) f += channel[_x + y * w] * fx[_x] * fy;\n        f /= w * h;\n        if (cx || cy) {\n          ac.push(f);\n          scale = max(scale, abs(f));\n        } else {\n          dc = f;\n        }\n      }\n    }\n    if (scale) for (var _i2 = 0; _i2 < ac.length; _i2++) ac[_i2] = 0.5 + 0.5 / scale * ac[_i2];\n    return [dc, ac, scale];\n  };\n  var _encodeChannel = encodeChannel(l, max(3, lx), max(3, ly)),\n    _encodeChannel2 = _slicedToArray(_encodeChannel, 3),\n    l_dc = _encodeChannel2[0],\n    l_ac = _encodeChannel2[1],\n    l_scale = _encodeChannel2[2];\n  var _encodeChannel3 = encodeChannel(p, 3, 3),\n    _encodeChannel4 = _slicedToArray(_encodeChannel3, 3),\n    p_dc = _encodeChannel4[0],\n    p_ac = _encodeChannel4[1],\n    p_scale = _encodeChannel4[2];\n  var _encodeChannel5 = encodeChannel(q, 3, 3),\n    _encodeChannel6 = _slicedToArray(_encodeChannel5, 3),\n    q_dc = _encodeChannel6[0],\n    q_ac = _encodeChannel6[1],\n    q_scale = _encodeChannel6[2];\n  var _ref = hasAlpha ? encodeChannel(a, 5, 5) : [],\n    _ref2 = _slicedToArray(_ref, 3),\n    a_dc = _ref2[0],\n    a_ac = _ref2[1],\n    a_scale = _ref2[2];\n  var isLandscape = w > h;\n  var header24 = round(63 * l_dc) | round(31.5 + 31.5 * p_dc) << 6 | round(31.5 + 31.5 * q_dc) << 12 | round(31 * l_scale) << 18 | (hasAlpha ? 1 : 0) << 23;\n  var header16 = (isLandscape ? ly : lx) | round(63 * p_scale) << 3 | round(63 * q_scale) << 9 | (isLandscape ? 1 : 0) << 15;\n  var hash = [header24 & 255, header24 >> 8 & 255, header24 >> 16, header16 & 255, header16 >> 8];\n  var ac_start = hasAlpha ? 6 : 5;\n  var ac_index = 0;\n  if (hasAlpha) hash.push(round(15 * a_dc) | round(15 * a_scale) << 4);\n  for (var ac of hasAlpha ? [l_ac, p_ac, q_ac, a_ac] : [l_ac, p_ac, q_ac]) for (var f of ac) hash[ac_start + (ac_index >> 1)] |= round(15 * f) << ((ac_index++ & 1) << 2);\n  return new Uint8Array(hash);\n}\nexport function thumbHashToRGBA(hash) {\n  var PI = Math.PI,\n    min = Math.min,\n    max = Math.max,\n    cos = Math.cos,\n    round = Math.round;\n  var header24 = hash[0] | hash[1] << 8 | hash[2] << 16;\n  var header16 = hash[3] | hash[4] << 8;\n  var l_dc = (header24 & 63) / 63;\n  var p_dc = (header24 >> 6 & 63) / 31.5 - 1;\n  var q_dc = (header24 >> 12 & 63) / 31.5 - 1;\n  var l_scale = (header24 >> 18 & 31) / 31;\n  var hasAlpha = header24 >> 23;\n  var p_scale = (header16 >> 3 & 63) / 63;\n  var q_scale = (header16 >> 9 & 63) / 63;\n  var isLandscape = header16 >> 15;\n  var lx = max(3, isLandscape ? hasAlpha ? 5 : 7 : header16 & 7);\n  var ly = max(3, isLandscape ? header16 & 7 : hasAlpha ? 5 : 7);\n  var a_dc = hasAlpha ? (hash[5] & 15) / 15 : 1;\n  var a_scale = (hash[5] >> 4) / 15;\n  var ac_start = hasAlpha ? 6 : 5;\n  var ac_index = 0;\n  var decodeChannel = function decodeChannel(nx, ny, scale) {\n    var ac = [];\n    for (var cy = 0; cy < ny; cy++) for (var cx = cy ? 0 : 1; cx * ny < nx * (ny - cy); cx++) ac.push(((hash[ac_start + (ac_index >> 1)] >> ((ac_index++ & 1) << 2) & 15) / 7.5 - 1) * scale);\n    return ac;\n  };\n  var l_ac = decodeChannel(lx, ly, l_scale);\n  var p_ac = decodeChannel(3, 3, p_scale * 1.25);\n  var q_ac = decodeChannel(3, 3, q_scale * 1.25);\n  var a_ac = hasAlpha && decodeChannel(5, 5, a_scale);\n  var ratio = thumbHashToApproximateAspectRatio(hash);\n  var w = round(ratio > 1 ? 32 : 32 * ratio);\n  var h = round(ratio > 1 ? 32 / ratio : 32);\n  var rgba = new Uint8Array(w * h * 4),\n    fx = [],\n    fy = [];\n  for (var y = 0, i = 0; y < h; y++) {\n    for (var x = 0; x < w; x++, i += 4) {\n      var l = l_dc,\n        p = p_dc,\n        q = q_dc,\n        a = a_dc;\n      for (var cx = 0, n = max(lx, hasAlpha ? 5 : 3); cx < n; cx++) fx[cx] = cos(PI / w * (x + 0.5) * cx);\n      for (var cy = 0, _n = max(ly, hasAlpha ? 5 : 3); cy < _n; cy++) fy[cy] = cos(PI / h * (y + 0.5) * cy);\n      for (var _cy = 0, j = 0; _cy < ly; _cy++) for (var _cx = _cy ? 0 : 1, fy2 = fy[_cy] * 2; _cx * ly < lx * (ly - _cy); _cx++, j++) l += l_ac[j] * fx[_cx] * fy2;\n      for (var _cy2 = 0, _j2 = 0; _cy2 < 3; _cy2++) {\n        for (var _cx2 = _cy2 ? 0 : 1, _fy = fy[_cy2] * 2; _cx2 < 3 - _cy2; _cx2++, _j2++) {\n          var f = fx[_cx2] * _fy;\n          p += p_ac[_j2] * f;\n          q += q_ac[_j2] * f;\n        }\n      }\n      if (hasAlpha) for (var _cy3 = 0, _j3 = 0; _cy3 < 5; _cy3++) for (var _cx3 = _cy3 ? 0 : 1, _fy2 = fy[_cy3] * 2; _cx3 < 5 - _cy3; _cx3++, _j3++) a += a_ac[_j3] * fx[_cx3] * _fy2;\n      var b = l - 2 / 3 * p;\n      var r = (3 * l - b + q) / 2;\n      var g = r - q;\n      rgba[i] = max(0, 255 * min(1, r));\n      rgba[i + 1] = max(0, 255 * min(1, g));\n      rgba[i + 2] = max(0, 255 * min(1, b));\n      rgba[i + 3] = max(0, 255 * min(1, a));\n    }\n  }\n  return {\n    w: w,\n    h: h,\n    rgba: rgba\n  };\n}\nexport function thumbHashToAverageRGBA(hash) {\n  var min = Math.min,\n    max = Math.max;\n  var header = hash[0] | hash[1] << 8 | hash[2] << 16;\n  var l = (header & 63) / 63;\n  var p = (header >> 6 & 63) / 31.5 - 1;\n  var q = (header >> 12 & 63) / 31.5 - 1;\n  var hasAlpha = header >> 23;\n  var a = hasAlpha ? (hash[5] & 15) / 15 : 1;\n  var b = l - 2 / 3 * p;\n  var r = (3 * l - b + q) / 2;\n  var g = r - q;\n  return {\n    r: max(0, min(1, r)),\n    g: max(0, min(1, g)),\n    b: max(0, min(1, b)),\n    a: a\n  };\n}\nexport function thumbHashToApproximateAspectRatio(hash) {\n  var header = hash[3];\n  var hasAlpha = hash[2] & 0x80;\n  var isLandscape = hash[4] & 0x80;\n  var lx = isLandscape ? hasAlpha ? 5 : 7 : header & 7;\n  var ly = isLandscape ? header & 7 : hasAlpha ? 5 : 7;\n  return lx / ly;\n}\nexport function rgbaToDataURL(w, h, rgba) {\n  var row = w * 4 + 1;\n  var idat = 6 + h * (5 + row);\n  var bytes = [137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, w >> 8, w & 255, 0, 0, h >> 8, h & 255, 8, 6, 0, 0, 0, 0, 0, 0, 0, idat >>> 24, idat >> 16 & 255, idat >> 8 & 255, idat & 255, 73, 68, 65, 84, 120, 1];\n  var table = [0, 498536548, 997073096, 651767980, 1994146192, 1802195444, 1303535960, 1342533948, -306674912, -267414716, -690576408, -882789492, -1687895376, -2032938284, -1609899400, -1111625188];\n  var a = 1,\n    b = 0;\n  for (var y = 0, i = 0, end = row - 1; y < h; y++, end += row - 1) {\n    bytes.push(y + 1 < h ? 0 : 1, row & 255, row >> 8, ~row & 255, row >> 8 ^ 255, 0);\n    for (b = (b + a) % 65521; i < end; i++) {\n      var u = rgba[i] & 255;\n      bytes.push(u);\n      a = (a + u) % 65521;\n      b = (b + a) % 65521;\n    }\n  }\n  bytes.push(b >> 8, b & 255, a >> 8, a & 255, 0, 0, 0, 0, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130);\n  for (var _ref3 of [[12, 29], [37, 41 + idat]]) {\n    var _ref4 = _slicedToArray(_ref3, 2);\n    var start = _ref4[0];\n    var _end = _ref4[1];\n    var c = ~0;\n    for (var _i3 = start; _i3 < _end; _i3++) {\n      c ^= bytes[_i3];\n      c = c >>> 4 ^ table[c & 15];\n      c = c >>> 4 ^ table[c & 15];\n    }\n    c = ~c;\n    bytes[_end++] = c >>> 24;\n    bytes[_end++] = c >> 16 & 255;\n    bytes[_end++] = c >> 8 & 255;\n    bytes[_end++] = c & 255;\n  }\n  return 'data:image/png;base64,' + btoa(String.fromCharCode.apply(String, bytes));\n}\nexport function thumbHashToDataURL(hash) {\n  var image = thumbHashToRGBA(hash);\n  return rgbaToDataURL(image.w, image.h, image.rgba);\n}\nexport function thumbHashStringToDataURL(thumbhash) {\n  var hash = Uint8Array.from(atob(thumbhash), function (c) {\n    return c.charCodeAt(0);\n  });\n  return thumbHashToDataURL(hash);\n}","map":{"version":3,"names":["rgbaToThumbHash","w","h","rgba","Error","PI","Math","round","max","cos","abs","avg_r","avg_g","avg_b","avg_a","i","j","alpha","hasAlpha","l_limit","lx","ly","l","p","q","a","r","g","b","encodeChannel","channel","nx","ny","dc","ac","scale","fx","cy","cx","f","x","y","fy","push","length","_encodeChannel","_encodeChannel2","_slicedToArray","l_dc","l_ac","l_scale","_encodeChannel3","_encodeChannel4","p_dc","p_ac","p_scale","_encodeChannel5","_encodeChannel6","q_dc","q_ac","q_scale","_ref","_ref2","a_dc","a_ac","a_scale","isLandscape","header24","header16","hash","ac_start","ac_index","Uint8Array","thumbHashToRGBA","min","decodeChannel","ratio","thumbHashToApproximateAspectRatio","n","fy2","thumbHashToAverageRGBA","header","rgbaToDataURL","row","idat","bytes","table","end","u","_ref3","_ref4","start","c","btoa","String","fromCharCode","apply","thumbHashToDataURL","image","thumbHashStringToDataURL","thumbhash","from","atob","charCodeAt"],"sources":["/Users/hoang/Documents/Đa nền tảng/ShopeeLite/shopee-lite-FE-native/node_modules/expo-image/src/utils/thumbhash/thumbhash.ts"],"sourcesContent":["// Code copied and slightly modified from https://github.com/evanw/thumbhash\n\n/**\n * Encodes an RGBA image to a ThumbHash. RGB should not be premultiplied by A.\n *\n * @param w The width of the input image. Must be ≤100px.\n * @param h The height of the input image. Must be ≤100px.\n * @param rgba The pixels in the input image, row-by-row. Must have w*h*4 elements.\n * @returns The ThumbHash as a Uint8Array.\n */\n\nexport function rgbaToThumbHash(w: number, h: number, rgba: Uint8Array) {\n  // Encoding an image larger than 100x100 is slow with no benefit\n  if (w > 100 || h > 100) throw new Error(`${w}x${h} doesn't fit in 100x100`);\n  const { PI, round, max, cos, abs } = Math;\n\n  // Determine the average color\n  let avg_r = 0,\n    avg_g = 0,\n    avg_b = 0,\n    avg_a = 0;\n  for (let i = 0, j = 0; i < w * h; i++, j += 4) {\n    const alpha = rgba[j + 3] / 255;\n    avg_r += (alpha / 255) * rgba[j];\n    avg_g += (alpha / 255) * rgba[j + 1];\n    avg_b += (alpha / 255) * rgba[j + 2];\n    avg_a += alpha;\n  }\n  if (avg_a) {\n    avg_r /= avg_a;\n    avg_g /= avg_a;\n    avg_b /= avg_a;\n  }\n\n  const hasAlpha = avg_a < w * h;\n  const l_limit = hasAlpha ? 5 : 7; // Use fewer luminance bits if there's alpha\n  const lx = max(1, round((l_limit * w) / max(w, h)));\n  const ly = max(1, round((l_limit * h) / max(w, h)));\n  const l: number[] = []; // luminance\n  const p: number[] = []; // yellow - blue\n  const q: number[] = []; // red - green\n  const a: number[] = []; // alpha\n\n  // Convert the image from RGBA to LPQA (composite atop the average color)\n  for (let i = 0, j = 0; i < w * h; i++, j += 4) {\n    const alpha = rgba[j + 3] / 255;\n    const r = avg_r * (1 - alpha) + (alpha / 255) * rgba[j];\n    const g = avg_g * (1 - alpha) + (alpha / 255) * rgba[j + 1];\n    const b = avg_b * (1 - alpha) + (alpha / 255) * rgba[j + 2];\n    l[i] = (r + g + b) / 3;\n    p[i] = (r + g) / 2 - b;\n    q[i] = r - g;\n    a[i] = alpha;\n  }\n\n  // Encode using the DCT into DC (constant) and normalized AC (varying) terms\n  const encodeChannel = (channel, nx, ny) => {\n    let dc = 0;\n    const ac: number[] = [];\n    let scale = 0;\n    const fx: number[] = [];\n    for (let cy = 0; cy < ny; cy++) {\n      for (let cx = 0; cx * ny < nx * (ny - cy); cx++) {\n        let f = 0;\n        for (let x = 0; x < w; x++) fx[x] = cos((PI / w) * cx * (x + 0.5));\n        for (let y = 0; y < h; y++)\n          for (let x = 0, fy = cos((PI / h) * cy * (y + 0.5)); x < w; x++)\n            f += channel[x + y * w] * fx[x] * fy;\n        f /= w * h;\n        if (cx || cy) {\n          ac.push(f);\n          scale = max(scale, abs(f));\n        } else {\n          dc = f;\n        }\n      }\n    }\n    if (scale) for (let i = 0; i < ac.length; i++) ac[i] = 0.5 + (0.5 / scale) * ac[i];\n    return [dc, ac, scale];\n  };\n  const [l_dc, l_ac, l_scale] = encodeChannel(l, max(3, lx), max(3, ly));\n  const [p_dc, p_ac, p_scale] = encodeChannel(p, 3, 3);\n  const [q_dc, q_ac, q_scale] = encodeChannel(q, 3, 3);\n  const [a_dc, a_ac, a_scale] = hasAlpha ? encodeChannel(a, 5, 5) : [];\n\n  // Write the constants\n  const isLandscape = w > h;\n  const header24 =\n    round(63 * (l_dc as number)) |\n    (round(31.5 + 31.5 * (p_dc as number)) << 6) |\n    (round(31.5 + 31.5 * (q_dc as number)) << 12) |\n    (round(31 * (l_scale as number)) << 18) |\n    ((hasAlpha ? 1 : 0) << 23);\n  const header16 =\n    (isLandscape ? ly : lx) |\n    (round(63 * (p_scale as number)) << 3) |\n    (round(63 * (q_scale as number)) << 9) |\n    ((isLandscape ? 1 : 0) << 15);\n  const hash = [\n    header24 & 255,\n    (header24 >> 8) & 255,\n    header24 >> 16,\n    header16 & 255,\n    header16 >> 8,\n  ];\n  const ac_start = hasAlpha ? 6 : 5;\n  let ac_index = 0;\n  if (hasAlpha) hash.push(round(15 * (a_dc as number)) | (round(15 * (a_scale as number)) << 4));\n\n  // Write the varying factors\n  for (const ac of hasAlpha ? [l_ac, p_ac, q_ac, a_ac] : [l_ac, p_ac, q_ac])\n    for (const f of ac as number[])\n      hash[ac_start + (ac_index >> 1)] |= round(15 * f) << ((ac_index++ & 1) << 2);\n  return new Uint8Array(hash);\n}\n\n/**\n * Decodes a ThumbHash to an RGBA image. RGB is not be premultiplied by A.\n *\n * @param hash The bytes of the ThumbHash.\n * @returns The width, height, and pixels of the rendered placeholder image.\n */\nexport function thumbHashToRGBA(hash: Uint8Array) {\n  const { PI, min, max, cos, round } = Math;\n\n  // Read the constants\n  const header24 = hash[0] | (hash[1] << 8) | (hash[2] << 16);\n  const header16 = hash[3] | (hash[4] << 8);\n  const l_dc = (header24 & 63) / 63;\n  const p_dc = ((header24 >> 6) & 63) / 31.5 - 1;\n  const q_dc = ((header24 >> 12) & 63) / 31.5 - 1;\n  const l_scale = ((header24 >> 18) & 31) / 31;\n  const hasAlpha = header24 >> 23;\n  const p_scale = ((header16 >> 3) & 63) / 63;\n  const q_scale = ((header16 >> 9) & 63) / 63;\n  const isLandscape = header16 >> 15;\n  const lx = max(3, isLandscape ? (hasAlpha ? 5 : 7) : header16 & 7);\n  const ly = max(3, isLandscape ? header16 & 7 : hasAlpha ? 5 : 7);\n  const a_dc = hasAlpha ? (hash[5] & 15) / 15 : 1;\n  const a_scale = (hash[5] >> 4) / 15;\n\n  // Read the varying factors (boost saturation by 1.25x to compensate for quantization)\n  const ac_start = hasAlpha ? 6 : 5;\n  let ac_index = 0;\n  const decodeChannel = (nx, ny, scale) => {\n    const ac: number[] = [];\n    for (let cy = 0; cy < ny; cy++)\n      for (let cx = cy ? 0 : 1; cx * ny < nx * (ny - cy); cx++)\n        ac.push(\n          (((hash[ac_start + (ac_index >> 1)] >> ((ac_index++ & 1) << 2)) & 15) / 7.5 - 1) * scale\n        );\n    return ac;\n  };\n  const l_ac = decodeChannel(lx, ly, l_scale);\n  const p_ac = decodeChannel(3, 3, p_scale * 1.25);\n  const q_ac = decodeChannel(3, 3, q_scale * 1.25);\n  const a_ac = hasAlpha && decodeChannel(5, 5, a_scale);\n\n  // Decode using the DCT into RGB\n  const ratio = thumbHashToApproximateAspectRatio(hash);\n  const w = round(ratio > 1 ? 32 : 32 * ratio);\n  const h = round(ratio > 1 ? 32 / ratio : 32);\n  const rgba = new Uint8Array(w * h * 4),\n    fx: number[] = [],\n    fy: number[] = [];\n  for (let y = 0, i = 0; y < h; y++) {\n    for (let x = 0; x < w; x++, i += 4) {\n      let l = l_dc,\n        p = p_dc,\n        q = q_dc,\n        a = a_dc;\n\n      // Precompute the coefficients\n      for (let cx = 0, n = max(lx, hasAlpha ? 5 : 3); cx < n; cx++)\n        fx[cx] = cos((PI / w) * (x + 0.5) * cx);\n      for (let cy = 0, n = max(ly, hasAlpha ? 5 : 3); cy < n; cy++)\n        fy[cy] = cos((PI / h) * (y + 0.5) * cy);\n\n      // Decode L\n      for (let cy = 0, j = 0; cy < ly; cy++)\n        for (let cx = cy ? 0 : 1, fy2 = fy[cy] * 2; cx * ly < lx * (ly - cy); cx++, j++)\n          l += l_ac[j] * fx[cx] * fy2;\n\n      // Decode P and Q\n      for (let cy = 0, j = 0; cy < 3; cy++) {\n        for (let cx = cy ? 0 : 1, fy2 = fy[cy] * 2; cx < 3 - cy; cx++, j++) {\n          const f = fx[cx] * fy2;\n          p += p_ac[j] * f;\n          q += q_ac[j] * f;\n        }\n      }\n\n      // Decode A\n      if (hasAlpha)\n        for (let cy = 0, j = 0; cy < 5; cy++)\n          for (let cx = cy ? 0 : 1, fy2 = fy[cy] * 2; cx < 5 - cy; cx++, j++)\n            a += a_ac[j] * fx[cx] * fy2;\n\n      // Convert to RGB\n      const b = l - (2 / 3) * p;\n      const r = (3 * l - b + q) / 2;\n      const g = r - q;\n      rgba[i] = max(0, 255 * min(1, r));\n      rgba[i + 1] = max(0, 255 * min(1, g));\n      rgba[i + 2] = max(0, 255 * min(1, b));\n      rgba[i + 3] = max(0, 255 * min(1, a));\n    }\n  }\n  return { w, h, rgba };\n}\n\n/**\n * Extracts the average color from a ThumbHash. RGB is not be premultiplied by A.\n *\n * @param hash The bytes of the ThumbHash.\n * @returns The RGBA values for the average color. Each value ranges from 0 to 1.\n */\nexport function thumbHashToAverageRGBA(hash: Uint8Array) {\n  const { min, max } = Math;\n  const header = hash[0] | (hash[1] << 8) | (hash[2] << 16);\n  const l = (header & 63) / 63;\n  const p = ((header >> 6) & 63) / 31.5 - 1;\n  const q = ((header >> 12) & 63) / 31.5 - 1;\n  const hasAlpha = header >> 23;\n  const a = hasAlpha ? (hash[5] & 15) / 15 : 1;\n  const b = l - (2 / 3) * p;\n  const r = (3 * l - b + q) / 2;\n  const g = r - q;\n  return {\n    r: max(0, min(1, r)),\n    g: max(0, min(1, g)),\n    b: max(0, min(1, b)),\n    a,\n  };\n}\n\n/**\n * Extracts the approximate aspect ratio of the original image.\n *\n * @param hash The bytes of the ThumbHash.\n * @returns The approximate aspect ratio (i.e. width / height).\n */\nexport function thumbHashToApproximateAspectRatio(hash: Uint8Array) {\n  const header = hash[3];\n  const hasAlpha = hash[2] & 0x80;\n  const isLandscape = hash[4] & 0x80;\n  const lx = isLandscape ? (hasAlpha ? 5 : 7) : header & 7;\n  const ly = isLandscape ? header & 7 : hasAlpha ? 5 : 7;\n  return lx / ly;\n}\n\n/**\n * Encodes an RGBA image to a PNG data URL. RGB should not be premultiplied by\n * A. This is optimized for speed and simplicity and does not optimize for size\n * at all. This doesn't do any compression (all values are stored uncompressed).\n *\n * @param w The width of the input image. Must be ≤100px.\n * @param h The height of the input image. Must be ≤100px.\n * @param rgba The pixels in the input image, row-by-row. Must have w*h*4 elements.\n * @returns A data URL containing a PNG for the input image.\n */\nexport function rgbaToDataURL(w: number, h: number, rgba: Uint8Array) {\n  const row = w * 4 + 1;\n  const idat = 6 + h * (5 + row);\n  const bytes = [\n    137,\n    80,\n    78,\n    71,\n    13,\n    10,\n    26,\n    10,\n    0,\n    0,\n    0,\n    13,\n    73,\n    72,\n    68,\n    82,\n    0,\n    0,\n    w >> 8,\n    w & 255,\n    0,\n    0,\n    h >> 8,\n    h & 255,\n    8,\n    6,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    idat >>> 24,\n    (idat >> 16) & 255,\n    (idat >> 8) & 255,\n    idat & 255,\n    73,\n    68,\n    65,\n    84,\n    120,\n    1,\n  ];\n  const table = [\n    0, 498536548, 997073096, 651767980, 1994146192, 1802195444, 1303535960, 1342533948, -306674912,\n    -267414716, -690576408, -882789492, -1687895376, -2032938284, -1609899400, -1111625188,\n  ];\n  let a = 1,\n    b = 0;\n  for (let y = 0, i = 0, end = row - 1; y < h; y++, end += row - 1) {\n    bytes.push(y + 1 < h ? 0 : 1, row & 255, row >> 8, ~row & 255, (row >> 8) ^ 255, 0);\n    for (b = (b + a) % 65521; i < end; i++) {\n      const u = rgba[i] & 255;\n      bytes.push(u);\n      a = (a + u) % 65521;\n      b = (b + a) % 65521;\n    }\n  }\n  bytes.push(\n    b >> 8,\n    b & 255,\n    a >> 8,\n    a & 255,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    73,\n    69,\n    78,\n    68,\n    174,\n    66,\n    96,\n    130\n  );\n  for (let [start, end] of [\n    [12, 29],\n    [37, 41 + idat],\n  ]) {\n    let c = ~0;\n    for (let i = start; i < end; i++) {\n      c ^= bytes[i];\n      c = (c >>> 4) ^ table[c & 15];\n      c = (c >>> 4) ^ table[c & 15];\n    }\n    c = ~c;\n    bytes[end++] = c >>> 24;\n    bytes[end++] = (c >> 16) & 255;\n    bytes[end++] = (c >> 8) & 255;\n    bytes[end++] = c & 255;\n  }\n  return 'data:image/png;base64,' + btoa(String.fromCharCode(...bytes));\n}\n\n/**\n * Decodes a ThumbHash to a PNG data URL. This is a convenience function that\n * just calls \"thumbHashToRGBA\" followed by \"rgbaToDataURL\".\n *\n * @param hash The bytes of the ThumbHash.\n * @returns A data URL containing a PNG for the rendered ThumbHash.\n */\nexport function thumbHashToDataURL(hash: Uint8Array): string {\n  const image = thumbHashToRGBA(hash);\n  return rgbaToDataURL(image.w, image.h, image.rgba);\n}\n\n/**\n * Convenience function added to the original thumbhash code, allows generating a thumbhash image directly from\n * thumbhash string.\n * @param thumbhash string from which thumbhashDataURL should be generated\n * @returns A data URL containing a PNG for the rendered ThumbHash\n */\nexport function thumbHashStringToDataURL(thumbhash: string): string {\n  const hash = Uint8Array.from(atob(thumbhash), (c) => c.charCodeAt(0));\n  return thumbHashToDataURL(hash);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}